import 'package:flutter/material.dart';
import '../../modules/mitm_attack.dart';
import '../../modules/arp_spoof.dart';
import '../../modules/dns_spoof.dart';

class ExploitScreen extends StatefulWidget {
  const ExploitScreen({super.key});

  @override
  State<ExploitScreen> createState() => _ExploitScreenState();
}

class _ExploitScreenState extends State<ExploitScreen> {
  final MitmAttack _mitmAttack = MitmAttack();
  final ArpSpoof _arpSpoof = ArpSpoof();
  final DnsSpoof _dnsSpoof = DnsSpoof();
  
  bool _isMitmActive = false;
  bool _isArpSpoofActive = false;
  bool _isDnsSpoofActive = false;
  
  String _targetIp = '';
  String _gatewayIp = '';
  String _networkInterface = 'wlan0';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Network Exploitation'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            _buildConfigurationCard(),
            const SizedBox(height: 16),
            _buildMitmCard(),
            const SizedBox(height: 16),
            _buildArpSpoofCard(),
            const SizedBox(height: 16),
            _buildDnsSpoofCard(),
          ],
        ),
      ),
    );
  }
  
  Widget _buildConfigurationCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Attack Configuration',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 16),
            TextField(
              decoration: const InputDecoration(
                labelText: 'Target IP Address',
                hintText: '192.168.1.100',
                border: OutlineInputBorder(),
              ),
              onChanged: (value) => _targetIp = value,
            ),
            const SizedBox(height: 12),
            TextField(
              decoration: const InputDecoration(
                labelText: 'Gateway IP Address',
                hintText: '192.168.1.1',
                border: OutlineInputBorder(),
              ),
              onChanged: (value) => _gatewayIp = value,
            ),
            const SizedBox(height: 12),
            TextField(
              decoration: const InputDecoration(
                labelText: 'Network Interface',
                hintText: 'wlan0',
                border: OutlineInputBorder(),
              ),
              onChanged: (value) => _networkInterface = value,
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildMitmCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.swap_horiz,
                  color: _isMitmActive ? Colors.green : Colors.grey,
                ),
                const SizedBox(width: 8),
                Text(
                  'Man-in-the-Middle Attack',
                  style: Theme.of(context).textTheme.titleMedium,
                ),
              ],
            ),
            const SizedBox(height: 8),
            const Text(
              'Intercept traffic between target and gateway using ARP spoofing.',
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _isMitmActive ? _stopMitm : _startMitm,
                    icon: Icon(_isMitmActive ? Icons.stop : Icons.play_arrow),
                    label: Text(_isMitmActive ? 'Stop MITM' : 'Start MITM'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: _isMitmActive ? Colors.red : Colors.green,
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                IconButton(
                  onPressed: () => _showMitmLogs(),
                  icon: const Icon(Icons.list),
                  tooltip: 'View Logs',
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildArpSpoofCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.network_check,
                  color: _isArpSpoofActive ? Colors.green : Colors.grey,
                ),
                const SizedBox(width: 8),
                Text(
                  'ARP Spoofing',
                  style: Theme.of(context).textTheme.titleMedium,
                ),
              ],
            ),
            const SizedBox(height: 8),
            const Text(
              'Poison ARP tables to redirect network traffic.',
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: _isArpSpoofActive ? _stopArpSpoof : _startArpSpoof,
              icon: Icon(_isArpSpoofActive ? Icons.stop : Icons.play_arrow),
              label: Text(_isArpSpoofActive ? 'Stop ARP Spoof' : 'Start ARP Spoof'),
              style: ElevatedButton.styleFrom(
                backgroundColor: _isArpSpoofActive ? Colors.red : Colors.orange,
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildDnsSpoofCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.dns,
                  color: _isDnsSpoofActive ? Colors.green : Colors.grey,
                ),
                const SizedBox(width: 8),
                Text(
                  'DNS Spoofing',
                  style: Theme.of(context).textTheme.titleMedium,
                ),
              ],
            ),
            const SizedBox(height: 8),
            const Text(
              'Redirect DNS queries to malicious servers.',
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: _isDnsSpoofActive ? _stopDnsSpoof : _startDnsSpoof,
              icon: Icon(_isDnsSpoofActive ? Icons.stop : Icons.play_arrow),
              label: Text(_isDnsSpoofActive ? 'Stop DNS Spoof' : 'Start DNS Spoof'),
              style: ElevatedButton.styleFrom(
                backgroundColor: _isDnsSpoofActive ? Colors.red : Colors.purple,
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  Future<void> _startMitm() async {
    if (_targetIp.isEmpty || _gatewayIp.isEmpty) {
      _showError('Please configure target and gateway IP addresses');
      return;
    }
    
    try {
      await _mitmAttack.startAttack(_targetIp, _gatewayIp, _networkInterface);
      setState(() {
        _isMitmActive = true;
      });
      _showSuccess('MITM attack started successfully');
    } catch (e) {
      _showError('Failed to start MITM attack: $e');
    }
  }
  
  Future<void> _stopMitm() async {
    try {
      await _mitmAttack.stopAttack();
      setState(() {
        _isMitmActive = false;
      });
      _showSuccess('MITM attack stopped');
    } catch (e) {
      _showError('Failed to stop MITM attack: $e');
    }
  }
  
  Future<void> _startArpSpoof() async {
    if (_targetIp.isEmpty || _gatewayIp.isEmpty) {
      _showError('Please configure target and gateway IP addresses');
      return;
    }
    
    try {
      await _arpSpoof.startSpoofing(_targetIp, _gatewayIp, _networkInterface);
      setState(() {
        _isArpSpoofActive = true;
      });
      _showSuccess('ARP spoofing started');
    } catch (e) {
      _showError('Failed to start ARP spoofing: $e');
    }
  }
  
  Future<void> _stopArpSpoof() async {
    try {
      await _arpSpoof.stopSpoofing();
      setState(() {
        _isArpSpoofActive = false;
      });
      _showSuccess('ARP spoofing stopped');
    } catch (e) {
      _showError('Failed to stop ARP spoofing: $e');
    }
  }
  
  Future<void> _startDnsSpoof() async {
    try {
      await _dnsSpoof.startSpoofing(_networkInterface);
      setState(() {
        _isDnsSpoofActive = true;
      });
      _showSuccess('DNS spoofing started');
    } catch (e) {
      _showError('Failed to start DNS spoofing: $e');
    }
  }
  
  Future<void> _stopDnsSpoof() async {
    try {
      await _dnsSpoof.stopSpoofing();
      setState(() {
        _isDnsSpoofActive = false;
      });
      _showSuccess('DNS spoofing stopped');
    } catch (e) {
      _showError('Failed to stop DNS spoofing: $e');
    }
  }
  
  void _showMitmLogs() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('MITM Attack Logs'),
        content: const SizedBox(
          width: double.maxFinite,
          height: 300,
          child: SingleChildScrollView(
            child: Text('Attack logs will be displayed here...'),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }
  
  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
      ),
    );
  }
  
  void _showSuccess(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
      ),
    );
  }
}